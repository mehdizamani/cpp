
/////////////////////// classes and object

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
using namespace std;

// Write your Student class here
class Student{
   public:
   int score[5];
   void input(){
       int i;
       for (int it=0;it<5;it++)
       {
           cin >> i;
           score[it]=i;
       }
   };
    
   int calculateTotalScore(){
     int sum=0;
     for (int i = 0; i < 5; i++) {
       sum += score[i];
     }
     return sum;
   };
};



int main() {
    int n; // number of students
    cin >> n;
    Student *s = new Student[n]; // an array of n students
    
    for(int i = 0; i < n; i++){
        s[i].input();
    }

    // calculate kristen's score
    int kristen_score = s[0].calculateTotalScore();

    // determine how many students scored higher than kristen
    int count = 0; 
    for(int i = 1; i < n; i++){
        int total = s[i].calculateTotalScore();
        if(total > kristen_score){
            count++;
        }
    }

    // print result
    cout << count;
    
    return 0;
}



///////////////// 
#include<bits/stdc++.h>

using namespace std;
//Implement the class Box  
//l,b,h are integers representing the dimensions of the box

// The class should have the following functions : 

// Constructors: 
// Box();
// Box(int,int,int);
// Box(Box);


// int getLength(); // Return box's length
// int getBreadth (); // Return box's breadth
// int getHeight ();  //Return box's height
// long long CalculateVolume(); // Return the volume of the box

//Overload operator < as specified
//bool operator<(Box& b)

//Overload operator << as specified
//ostream& operator<<(ostream& out, Box& B)
class Box{
    private:
       int l,b,h;
    public:
    Box():b(0),l(0),h(0){};
    Box(int L, int B, int H) {
      b = B;
      l = L;
      h = H;
    };
    Box(const Box & bx){
        this->l = bx.l;
        this->b = bx.b;
        this->h = bx.h;
    };
    ~Box(){};

    int getLength(){
        return this->l;
    }; // Return box's length
    int getBreadth() {
         return this->b;
          }; // Return box's breadth
    int getHeight() { 
        return this->h; 
        };
    long long CalculateVolume() 
    { 
        return (long long)b * l * h;
         };
    bool operator<(Box &b)
    {
      if ((this->l < b.l) || (this->b < b.b && this->l == b.l) ||
          (this->h < b.h && this->l == b.l && this->b == b.b))
        return true;
      else
        return false;
    };
    friend ostream& operator<<(ostream & os, const Box &b)
    {
      os << b.l << " " << b.b << " " << b.h;
      return os;
    };
};


void check2()
{
	int n;
	cin>>n;
	Box temp;
	for(int i=0;i<n;i++)
	{
		int type;
		cin>>type;
		if(type ==1)
		{
			cout<<temp<<endl;
		}
		if(type == 2)
		{
			int l,b,h;
			cin>>l>>b>>h;
			Box NewBox(l,b,h);
			temp=NewBox;
			cout<<temp<<endl;
		}
		if(type==3)
		{
			int l,b,h;
			cin>>l>>b>>h;
			Box NewBox(l,b,h);
			if(NewBox<temp)
			{
				cout<<"Lesser\n";
			}
			else
			{
				cout<<"Greater\n";
			}
		}
		if(type==4)
		{
			cout<<temp.CalculateVolume()<<endl;
		}
		if(type==5)
		{
			Box NewBox(temp);
			cout<<NewBox<<endl;
		}

	}
}

int main()
{
	check2();
}
