////////////  Set
Sets are a part of the C++ STL. Sets are containers that store unique elements
following a specific order. Here are some of the frequently used member functions of sets:

Declaration:
set<int>s; //Creates a set of integers.

Size:
int length=s.size(); //Gives the size of the set.
Insert:

s.insert(x); //Inserts an integer x into the set s.
Erasing an element:

s.erase(val); //Erases an integer val from the set s.
Finding an element:

set<int>::iterator itr=s.find(val); //Gives the iterator to the element val if it is found otherwise returns s.end() .
Ex: set<int>::iterator itr=s.find(100); //If 100 is not present then it==s.end().

To know more about sets click Here. Coming to the problem, you will be given  queries. Each query is of one of the following three types:

  : Add an element  to the set.
  : Delete an element  from the set. (If the number  is not present in the set, then do nothing).
  : If the number  is present in the set, then print "Yes"(without quotes) else print "No"(without quotes).

Input Format

The first line of the input contains  where  is the number of queries. The next  lines contain  query each. Each query consists of two integers  and  where  is the type of the query and  is an integer.


8

1 9
1 6
1 10
1 4
3 6
3 14
2 6
3 6

Your Output (stdout)
Yes
No
No


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <set>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int temp;
    int temp2;
    int temp3;
    set<int> s;
    cin >>temp;
    for (int i=0;i<temp;i++)
    {
        cin>> temp2 >> temp3;
        switch(temp2){
            case 1:
                s.insert(temp3);
                break;
            case 2:
                if (s.find(temp3)!=s.end())
                    s.erase(temp3);
              break;
            case 3:
              if (s.find(temp3) != s.end())
                cout<< "Yes"<<endl;
                else 
                cout<<"No"<<endl;
            default:
                break;
        }
    }
    return 0;
}




//////////////////////////////
/*
add several big numbers ---> hint is to use long long 
Sample Input

5
1000000001 1000000002 1000000003 1000000004 1000000005
Output

5000000015
*/

// Complete the aVeryBigSum function below.
long aVeryBigSum(vector<long> ar) {
/*
    vector<string> sVecArr;
    int max_size=0;
    for (int i=0;i<ar.size();i++)
    {
        //ss.str(""); // clear the ss
        stringstream ss;   
        ss<<ar[i];
        sVecArr.push_back(ss.str());
        max_size=max(max_size,(int)sVecArr[i].length() );   
    }
*/
    long long res=0;
    for (int i=0;i<ar.size();i++)
    {
        res+=(long) ar[i];
    }
    return res;
}



//////////////
/* max number of repeats  out of 5 numbers in a vector
For example, assume your bird sightings are [1,1,2,2,3]. 
There are two each of types 1 and2 , and one sighting of type 3. Pick the lower of the two types seen twice: type .
Sample Input 0

6
1 4 4 4 5 3
Sample Output 0

4
// Complete the migratoryBirds function below.
int migratoryBirds(vector<int> arr) {

    vector<int> v(5,0);
    int res=6;
    for (int i=0;i<arr.size();i++)
        v[arr[i]-1]++;
    int max=*max_element(v.begin(),v.end());  // important : to get max valueof a vector
    for (int i=0;i<v.size();i++)
        if (v[i]==max)
            res = min(res, i+1);
    return res;
}




//////////////////////
/* Roy wanted to increase his typing speed for programming contests. His friend suggested that he type the sentence 
"The quick brown fox jumps over the lazy dog" repeatedly.
This sentence is known as a pangram because it contains every letter of the alphabet.
After typing the sentence several times, Roy became bored with it so he started to look for other pangrams.
Given a sentence, determine whether it is a pangram. Ignore case.



Sample Input 0

We promptly judged antique ivory buckles for the next prize

Sample Output 0

pangram

Sample Explanation 0

All of the letters of the alphabet are present in the string.



Sample Input 1

We promptly judged antique ivory buckles for the prize

Sample Output 1

not pangram

*/
string pangrams(string s) {
    int cnt=0;
    unordered_map <int , char> m;
    int temp=0;
    for (int i=65;i<91;i++) ///ascii codes of A - Z
        m[i]++;
    for (int i=97;i<123;i++) ///ascii codes of a - z
        m[i]++;
    for (int i=0;i<s.length();i++)
    {
        temp=(int)(s[i]);
        if(m.find(temp)!=m.end())
        {
            cnt++;
            if (temp>=65 && temp<91)
            {
                m.erase(m.find(temp));
                m.erase(m.find(temp+32));

            }else if (temp>=97 && temp<123)
            {
                m.erase(m.find(temp));
                m.erase(m.find(temp-32));
            }
        }    
    }
    return cnt==26 ? "pangram":"not pangram";

}


///////////////////////////////////////////////////////////


string expression="45454+5";
int a;
for (int i=0;i<5;i++)
if(isdigit(expression[i]))  // IMPORTANT!!
  i=stoi(expression.substr(i,1));  ///  provide only one char at a time and convert it to int

queue<char> q;
string expression2="we are good";
for (int i=0;i<5;i++)
  q.push(toupper(expression2[i])); // to convert to capital WE ARE GOOD

///////////////////////////

// to_string example
#include <iostream>   // std::cout
#include <string>     // std::string, std::to_string

int main ()
{
  std::string pi = "pi is " + std::to_string(3.1415926);   /// !!!!! HOW TO CONVERT A NUMBER TO STRING
  std::string perfect = std::to_string(1+2+4+7+14) + " is a perfect number";
  std::cout << pi << '\n';
  std::cout << perfect << '\n';
  return 0;
  }
