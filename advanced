Your manager gave you a text file with many lines of numbers to format and print. For each row of  space-separated doubles,
format and print the numbers using the specifications in the Output Format section below.


Sample Input

1  
100.345 2006.008 2331.41592653498
Sample Output

0x64             
_______+2006.01  
2.331415927E+03



// MY APPROACH

/*printf("0x%x\n",(int)A);
char c;
c= B>=0? '+':'-';
int cnt=0;
int Btemp=B;
while(Btemp>0)
{
    Btemp/=10;
    cnt++;
}
int digits=4+cnt;
string s;
for(int i=15-digits;i>0;i--)
    s= s + "-";
printf("%s%c%.2f\n",s.c_str(),c,B);

cout<<std::scientific<<setprecision(9);//std::setx(10);
cout<<C;
*/

cout << hex << left << showbase << nouppercase; // formatting
cout << (long long) A << endl; // actual printed part

// LINE 2
cout << dec << right << setw(15) << setfill('_') << showpos << fixed << setprecision(2); // formatting
cout << B << endl; // actual printed part

// LINE 3
cout << scientific << uppercase << noshowpos << setprecision(9); // formatting
cout << C << endl; // actual printed part





///////////////////////////////////////////////////////////////////
void recursive(vector<int> &d, vector<int>& c, int& res)
	{
		make_heap(d.begin(), d.end());   /// IMP!!!  it creates a max heap from a range of data
		make_heap(c.begin(), c.end());
	}
    E.G.:
     vector<int> vi = { 4, 6, 7, 9, 11, 4 }; 
    // using make_heap() to transform vector into a max heap 
    make_heap(vi.begin(),vi.end()); 
    cout<< vi.front(); // 11
    int a = 10;
    for ( int i=0; i<k; i++) 
    {
	    // push a job with priority level 
	    vi.push_back(a);           
	    // transform into heap ( using push_heap() ) 
	    push_heap(vi.begin(), vi.end());     /// IMP !!
    }
      
    Or:
    
    // comparator function to make min heap 
    struct greaters{ 
    bool operator()(const long& a,const long& b) const{ 
	  return a>b; 
	} 
    }; 
    main(){
	    vector<int> vi = { 15, 6, 7, 9, 11, 45 }; 
	    // using make_heap() to transform vector into a min heap 
	    make_heap(vi.begin(),vi.end(), greaters());  
	    cout << vi.front() << endl; // 6
    }
    
 //////////////////////////////////////////////////////
 
 instead of :
  int ages[3];
  ages[1] = 18;
  ages[2] = 21;
  ages[3] = 35;
  int total(0);
  for(auto age: ages){
    total += age;
  }  
  
 we can use : !!!!!!
    #include <numeric>
    int initial_sum  = 0; 
    accumulate(age,age+3, initial_sum); 
   
    OR
    vector<int> v;
    accumulate(v.begin(), v.end(), initial_sum); 
  /////////////////////////////////////////////////
  
  std::vector<int> items;
  items.push_back(1);
  items.push_back(2);
  items.push_back(3);
  std::vector<int>::iterator iter;
  for (iter = items.begin(); iter != items.end(); ++iter) {
    if (*iter == 2) {
      items.erase(iter);  ///// ERROR CAN NOT DELETE IN THE MIDDLE OF LOOP
    }
  }
  
  
  ///////////////////////////////////////////////
  Since C++14, you can use auto as a return type, but all returns should have the same type.
  
  std::vector<int> alpha{1, 2, 3};
  // auto beta{1, 2, 3}; // error: initializer for variable 'beta' with type 'auto' contains multiple expressions
  auto gamma = {1, 2, 3}; // can do this, but... wrong type
  auto delta = std::vector<int>{1, 2, 3};
  std::vector<int> epsilon;
  // auto zeta;  // error: declaration of variable 'zeta' with deduced type 'auto' requires an initializer



//////////////////////////////
size_t is a basic unsigned integer. It's size depends on the system. 
It can store the maximum size of a theoretically possible object of any type, 
including a ray. Using size_t can improve your code's portability and efficiency.
Most index containers in the STL use size type, which is another name for size_t.

const std:: size_t N{10};
std::size_t [N];
for (size_t n{0};n<N;++n) // intizialization!!!
    a[n]=n;
    
for(size_t n{N};n-->0;)  // decrement !!
    cout<<a[n];
   
   
 //////////////////////////////////////
 
 usage of auto in modern C++
 
  std::vector<int> v{0, 1, 2, 3, 4, 5};
  for (auto i : v) {
    std::cout << i << ' ';
  }
  std::cout << std::endl;

  for (int n : {9, 8, 7, 6, 5, 4}) {
    std::cout << n << ' ';
  }
  std::cout << std::endl;

  int a[]{0, 1, 2, 3, 4, 5};
  for (auto n : a) {
    std::cout << n << ' ';
  }
  std::cout << std::endl;

  std::string str{"Modern C++"};
  for (auto ch : str) {
    std::cout << ch << ' ';
  }
  std::cout << std::endl;

  std::map<int, std::string> nicknames{{1, "biz"},
                                        {2, "fox"},
                                        {3, "wiz"}};
  for (auto ndx : nicknames) {
    std::cout << ndx.first << ", " << ndx.second << std::endl;
  }
  
  /////////////////////////////////////////
  LAMDA and for_each



FIRST:

   std::vector<int> nums{3, 4, 2, 8, 15, 267};
  std::for_each(nums.begin(), nums.end(), std::bind(&print_it, std::placeholders::_1));
  std::cout << std::endl;
  std::for_each(nums.begin(), nums.end(), [](const int &n) { std::cout << "-" << n; });
  std::cout << std::endl;

  auto myLambda = [](const int &n) { std::cout << "*" << n; };
  std::for_each(nums.begin(), nums.end(), myLambda);
  std::cout << std::endl;

  auto currentLight = BattleCondition::green;
  const auto shieldLevel = [&]() {
    switch (currentLight) {
      case BattleCondition::green:
        return 50;
      case BattleCondition::yellow:
        return 700;
      case BattleCondition::red:
      default:
        return 1000;
    }
  }();
  std::cout << "Current Shield Level = " << shieldLevel << std::endl;


SECOND:
auto header = [](std::string title){
    std::cout << "---- " << title << " ----" << '\n';
  };
  auto render = [](auto collection) {
    for (const auto &val: collection) {
      std::cout << val << '\n';
    }
  };

  header("map");
  std::vector<int> inCollection{11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
  std::vector<int> outCollection;
  transform(inCollection.begin(), inCollection.end(), back_inserter(outCollection),
            [](const int &value) { return value * 3; });
  render(outCollection);

  header("filter");
  std::vector<int> filteredCollection;

  copy_if(outCollection.begin(), outCollection.end(), back_inserter(filteredCollection),
          [](int &value) { return value % 2 != 0; });
  render(filteredCollection);

  header("reduce");
  int results = std::accumulate(filteredCollection.begin(), filteredCollection.end(),
                           0, [](int total, int current) {
        return total + current;
      });
  std::cout << "results: " << results << "\n";
  
  


//////////////////////////////////////////////
 MAGIC OF VARIANT TEMPLATE FUNCTION!!!!
 WHEN WE WANT TO HAVE A FUNCTION WITH VARIABLE INPUT
 
template<typename T>
T rcatenate(T v) {
  return v;
}

template<typename T, typename... Args>
T rcatenate(T first, Args... args) {
  return rcatenate(args...) + " " + first;
}

int main() {
  std::string s1 = "biz", s2 = "fox", s3 = "wiz";
  std::string cc = rcatenate(s1, s2, s3);
  std::cout << "reverse concatenated = " << cc << std::endl;
  return 0;
}



OR 


template<typename T>
T summer(T v) {
  return v;
}

template<typename T, typename... Args>
T summer(T first, Args... args) {
  return first + summer(args...);
}

int main() {
  std::cout << "summer(1, 2, 13, 100, 200) = " << summer(1, 2, 13, 100, 200) << std::endl;
  return 0;
}






   
   
/////////////////////////////////////
int main()
{
    std::vector<int> v{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
 
    int sum = std::accumulate(v.begin(), v.end(), 0);
 
    int product = std::accumulate(v.begin(), v.end(), 1, std::multiplies<int>());
 
    auto dash_fold = [](std::string a, int b) {
                         return std::move(a) + '-' + std::to_string(b);
                     };
 
    std::string s = std::accumulate(std::next(v.begin()), v.end(),
                                    std::to_string(v[0]), // start with first element
                                    dash_fold);
 
    // Right fold using reverse iterators
    std::string rs = std::accumulate(std::next(v.rbegin()), v.rend(),
                                     std::to_string(v.back()), // start with last element
                                     dash_fold);
 
    std::cout << "sum: " << sum << '\n'
              << "product: " << product << '\n'
              << "dash-separated string: " << s << '\n'
              << "dash-separated string (right-folded): " << rs << '\n';
}
Output:

sum: 55
product: 3628800
dash-separated string: 1-2-3-4-5-6-7-8-9-10
dash-separated string (right-folded): 10-9-8-7-6-5-4-3-2-1



/////////////////////////

#include <iostream>
#include <vector>

using namespace std;

class HotelRoom {
public:
    HotelRoom(int bedrooms, int bathrooms) 
    : bedrooms_(bedrooms), bathrooms_(bathrooms) {}
    
    virtual int get_price() {
        return 50*bedrooms_ + 100*bathrooms_;
    }
private:
    int bedrooms_;
    int bathrooms_;
};

class HotelApartment : public HotelRoom {
public:
    HotelApartment(int bedrooms, int bathrooms) 
    : HotelRoom(bedrooms, bathrooms) {}

    int get_price() {
        return HotelRoom::get_price() + 100; // tricky to use scope resolution operator
    }
};

int main() {
    int n;
    cin >> n;
    vector<HotelRoom*> rooms;
    for (int i = 0; i < n; ++i) {
        string room_type;
        int bedrooms;
        int bathrooms;
        cin >> room_type >> bedrooms >> bathrooms;
        if (room_type == "standard") {
            rooms.push_back(new HotelRoom(bedrooms, bathrooms));   // TRICKY HOW TO INITIAL!!!
        } else {
            rooms.push_back(new HotelApartment(bedrooms, bathrooms));
        }
    }

    int total_profit = 0;
    for (auto room : rooms) {
        total_profit += room->get_price();
    }
    cout << total_profit << endl;

    for (auto room : rooms) {
        delete room;   // DELETE!!!!!!!!
    }
    rooms.clear();

    return 0;
}




///////////////////////////////////////

template<bool... digits> 
int reversed_binary_value(){
    int sum = 0; int product = 1;
    bool binary[] = { digits... };
    for (bool digit : binary) {
        sum += (digit ? product : 0);
        product *= 2;
    }
    return sum;
};
/////////////////////


Inner product of teo vectors:

#include<numeric>   
vector<int> a  = {1,2,3};
vector<int> b  = {1,2,3};

int product = std::inner_product(a.begin(), a.end(), b.begin(), 0);

